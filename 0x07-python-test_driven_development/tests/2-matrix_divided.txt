Tests for <2-matrix_divided>
========================================

Tests examples are listed below
----------------------------------------

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], -300)
[[-0.0, -0.01, -0.01], [-0.01, -0.02, -0.02]]
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], "divisor the advisor")
Traceback (most recent call last):
...
TypeError: div must be a number
>>> matrix_divided("bank pays you dividend of $50", 10)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[1, 2, 3], [4, 5]], 20)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], float('inf'))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], float('NaN'))
[[nan, nan, nan], [nan, nan, nan]]
>>> matrix_divided([[-0.01, 0.02, 1/4], [(2 + 3), 5, 6]], 0.058)
[[-0.17, 0.34, 4.31], [86.21, 86.21, 103.45]]
>>> matrix_divided([[1, 2, 3], [4, "Neo come back to the matrix", 6]], 20)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[1]], 2)
[[0.5]]
>>> matrix_divided(["Agent Smith", "Agent Smith", "Agent Smith"], -300)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([], -300)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
